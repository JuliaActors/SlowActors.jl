var documenterSearchIndex = {"docs":
[{"location":"api/#Actor-API","page":"API","title":"Actor API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = SlowActors","category":"page"},{"location":"api/#Installation","page":"API","title":"Installation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SlowActors\nSlowActors.version","category":"page"},{"location":"api/#SlowActors.SlowActors","page":"API","title":"SlowActors.SlowActors","text":"SlowActors\n\nA minimal Julia actors library for using the Actors interface.\n\nIt is not registered since it has demonstrative purpose.  You can install it by:\n\npkg> add \"https://github.com/JuliaActors/SlowActors.jl\"\n\n\n\n\n\n","category":"module"},{"location":"api/#SlowActors.version","page":"API","title":"SlowActors.version","text":"Gives the package version.\n\n\n\n\n\n","category":"constant"},{"location":"api/","page":"API","title":"API","text":"SlowActors uses and reexports Actors. So the functionality of Actors is available to work with \"slow\" actors.","category":"page"},{"location":"api/#Starting-Actors,-creating-Links","page":"API","title":"Starting Actors, creating Links","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SlowActors are actually a complete different implementation of actors than those in Actors. They implement a Mailbox type for communication. Slow actors don`t run in a loop listening to a channel, but are actually started as tasks when a message is sent to them.","category":"page"},{"location":"api/","page":"API","title":"API","text":"But both libraries use a common Link{T} for communication. The following functions for creating actors or links return Link{Mailbox} as concrete type:","category":"page"},{"location":"api/","page":"API","title":"API","text":"spawn\nnewLink","category":"page"},{"location":"api/#SlowActors.spawn","page":"API","title":"SlowActors.spawn","text":"spawn(bhv::Func; sticky=false)\n\nCreate a new slow actor with a behavior bhv. If sticky=true  it is started on the same thread as the sender of a message.\n\nNote: a slow actor is actually started as a task if a message is sent to it.\n\n\n\n\n\n","category":"function"},{"location":"api/#SlowActors.newLink","page":"API","title":"SlowActors.newLink","text":"newLink()\n\nCreate a mailbox (without an actor) which can be used to  communicate with slow actors. \n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"SlowActors exports only those two functions.","category":"page"},{"location":"api/#Primitives","page":"API","title":"Primitives","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SlowActors reimplements actually only one actor primitive:","category":"page"},{"location":"api/","page":"API","title":"API","text":"send!","category":"page"},{"location":"api/#Actors.send!","page":"API","title":"Actors.send!","text":"send!(lk::Link{Mailbox}, msg::Msg)\nsend!(lk::Link{Mailbox}, msg...)\n\nSend a message msg to a slow actor. Start it if it doesn't run.\n\nNote: You must reeimplement those as methods of Actors.send!.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"The other actor primitives such as become! or self are plugged in from Actors. See the source how that works.","category":"page"},{"location":"api/#User-API","page":"API","title":"User API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Likewise with the user API. SlowActors doesn't implement any user API functions but uses the message protocol of Actors and thus gets the Actors API.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SlowActors","category":"page"},{"location":"#SlowActors","page":"Home","title":"SlowActors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A \"slow\" actor library to test the interface with Actors.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SlowActors implements the minimal actor primitives defined by Actors.jl in a different way in order to","category":"page"},{"location":"","page":"Home","title":"Home","text":"prove that they are sufficient to run the basic examples,\nshow that actors from both libraries can communicate,\nmake API functions and applications of Actors.jl run with SlowActors,\ngive an example how the interface of Actors.jl can be implemented in another library.","category":"page"}]
}
