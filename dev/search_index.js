var documenterSearchIndex = {"docs":
[{"location":"api/#Actor-API","page":"API","title":"Actor API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = SlowActors","category":"page"},{"location":"api/#Installation","page":"API","title":"Installation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SlowActors\nSlowActors.version","category":"page"},{"location":"api/#SlowActors.SlowActors","page":"API","title":"SlowActors.SlowActors","text":"SlowActors\n\nA minimal Julia actors library for using the Actors interface.\n\nIt is not registered since it has demonstrative purpose.  You can install it by:\n\npkg> add \"https://github.com/JuliaActors/SlowActors.jl\"\n\n\n\n\n\n","category":"module"},{"location":"api/#SlowActors.version","page":"API","title":"SlowActors.version","text":"Gives the package version.\n\n\n\n\n\n","category":"constant"},{"location":"api/","page":"API","title":"API","text":"SlowActors uses and reexports Actors. So the functionality of Actors is available to work with \"slow\" actors.","category":"page"},{"location":"api/#Starting-Actors,-creating-Links","page":"API","title":"Starting Actors, creating Links","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SlowActors are actually a complete different implementation of actors than those in Actors. They implement a Mailbox type for communication. Slow actors don`t run in a loop listening to a channel, but are actually started as tasks when a message is sent to them.","category":"page"},{"location":"api/","page":"API","title":"API","text":"But both libraries use a common Link{T} for communication. The following functions for creating actors or links return Link{Mailbox} as concrete type:","category":"page"},{"location":"api/","page":"API","title":"API","text":"spawn\nnewLink","category":"page"},{"location":"api/#SlowActors.spawn","page":"API","title":"SlowActors.spawn","text":"spawn(bhv::Func; sticky=false)\n\nCreate a new slow actor with a behavior bhv. If sticky=true  it is started on the same thread as the sender of a message.\n\nNote: a slow actor is actually started as a task if a message is sent to it.\n\n\n\n\n\n","category":"function"},{"location":"api/#SlowActors.newLink","page":"API","title":"SlowActors.newLink","text":"newLink()\n\nCreate a mailbox (without an actor) which can be used to  communicate with slow actors. \n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"SlowActors exports only those two functions.","category":"page"},{"location":"api/#Primitives","page":"API","title":"Primitives","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SlowActors reimplements actually only one actor primitive:","category":"page"},{"location":"api/","page":"API","title":"API","text":"send!","category":"page"},{"location":"api/#Actors.send!","page":"API","title":"Actors.send!","text":"send!(lk::Link{Mailbox}, msg::Msg)\nsend!(lk::Link{Mailbox}, msg...)\n\nSend a message msg to a slow actor. Start it if it doesn't run.\n\nNote: You must reeimplement those as methods of Actors.send!.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"The other actor primitives such as become! or self are plugged in from Actors. See the source how that works.","category":"page"},{"location":"api/#User-API","page":"API","title":"User API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Likewise with the user API. SlowActors doesn't implement any user API functions but uses the message protocol of Actors and thus gets the Actors API.","category":"page"},{"location":"integrate/#Integration","page":"Integration","title":"Integration","text":"","category":"section"},{"location":"integrate/","page":"Integration","title":"Integration","text":"SlowActors took the following steps to integrate with Actors:","category":"page"},{"location":"integrate/#Actor-Primitives","page":"Integration","title":"Actor Primitives","text":"","category":"section"},{"location":"integrate/#.-Reexport-Actors","page":"Integration","title":"1. Reexport Actors","text":"","category":"section"},{"location":"integrate/","page":"Integration","title":"Integration","text":"using Reexport\n@reexport using Actors","category":"page"},{"location":"integrate/#.-Provide-Yourtype-as-a-Link{T}-parameter","page":"Integration","title":"2. Provide Yourtype as a Link{T} parameter","text":"","category":"section"},{"location":"integrate/","page":"Integration","title":"Integration","text":"I the case of SlowActors this is Mailbox:","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"struct Mailbox\n    box::Deque\n    lock::ReentrantLock\n    A::Union{Nothing,SlowActor}\nend","category":"page"},{"location":"integrate/#.-Provide-a-concrete-Link-type","page":"Integration","title":"3. Provide a concrete Link type","text":"","category":"section"},{"location":"integrate/","page":"Integration","title":"Integration","text":"You then can create a new concrete Link{Yourtype} type:","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"newLink() = Link(Mailbox(Deque{Any}(), ReentrantLock(), nothing),\n                 myid(), :local)","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"Your actor creation primitive, e.g. spawn must return that type too:","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"function spawn(bhv::Func; sticky=false)\n    lk = Link(\n        Mailbox(Deque{Any}(), ReentrantLock(), \n            SlowActor(nothing, sticky, _ACT())),\n        myid(), :local\n    )\n    lk.chn.A.act.bhv = bhv\n    lk.chn.A.act.self = lk\nend","category":"page"},{"location":"integrate/#.-Export-your-primitives-for-link-and-actor-creation","page":"Integration","title":"4. Export your primitives for link and actor creation","text":"","category":"section"},{"location":"integrate/","page":"Integration","title":"Integration","text":"export newLink, spawn","category":"page"},{"location":"integrate/#.-Reimplement-send!-for-your-link-type","page":"Integration","title":"5. Reimplement send! for your link type","text":"","category":"section"},{"location":"integrate/","page":"Integration","title":"Integration","text":"Actors.send!(lk::Link{Mailbox}, msg::Msg) = (push!(lk.chn, msg); _start_on_send(lk))\nActors.send!(lk::Link{Mailbox}, msg...) = (push!(lk.chn, msg); _start_on_send(lk))","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"Then you can send messages between actors using the Actors interface. Still some further primitives are missing, e.g. self() and become!/become. You get those and much more if you plug in the messaging protocol of Actors.","category":"page"},{"location":"integrate/#Plugin-the-Actors-API","page":"Integration","title":"Plugin the Actors API","text":"","category":"section"},{"location":"integrate/#.-Provide-your-actor-with-the-_ACT-variable","page":"Integration","title":"6. Provide your actor with the _ACT variable","text":"","category":"section"},{"location":"integrate/","page":"Integration","title":"Integration","text":"The _ACT variable contains status information for each actor such as the behavior function, the actor link, init and exit functions, actor ties ...","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"Therefore on actor creation you create also _ACT(). As shown above, you must set the fields bhv and self with the behavior and the actor link respectively:","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"    ...\n    lk.chn.A.act.bhv = bhv\n    lk.chn.A.act.self = lk\nend","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"When your actor task starts, it puts a reference to its _ACT variable into task_local_storage:","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"function _act(mbx::Mailbox)\n    task_local_storage(\"_ACT\", mbx.A.act)\n    magic = hash(rand(Int))\n    while true\n        msg = lock(mbx.lock) do \n            isempty(mbx.box) ?\n                magic : popfirst!(mbx.box)\n        end\n        msg == magic && break\n        msg isa Actors.Exit && break\n        onmessage(mbx.A.act, msg)\n    end\nend","category":"page"},{"location":"integrate/#.-Call-onmessage-to-process-a-message","page":"Integration","title":"7. Call onmessage to process a message","text":"","category":"section"},{"location":"integrate/","page":"Integration","title":"Integration","text":"If a message of type Msg arrives, onmessage provides a finite state machine to process it. To call onmessage(A::_ACT, msg) enables the Actors messaging protocol.","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"You can extend Msg with new message types or create other message types. In that case you might want to extend Actors.onmessage to handle those other types if you don't want the standard behavior to pass it as last argument to the behavior function.","category":"page"},{"location":"integrate/#.-Enable-receive!","page":"Integration","title":"8. Enable receive!","text":"","category":"section"},{"location":"integrate/","page":"Integration","title":"Integration","text":"The Actors API works with receive! to enable easy communication with actors. You enable receive! on your concrete link type if you extend three Base functions with your Link{Yourtype} parameter Yourtype, e.g.:","category":"page"},{"location":"integrate/","page":"Integration","title":"Integration","text":"Base.isready(mbx::Mailbox) = !isempty(mbx)\nfunction Base.fetch(mbx::Mailbox) # this waits for a message\n    timedwait(60, pollint=0.01) do \n        !isempty(mbx)\n    end == :ok ?\n        lock(()->first(mbx.box), mbx.lock) :\n        :timed_out\nend\nBase.take!(mbx::Mailbox) = popfirst!(mbx)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SlowActors","category":"page"},{"location":"#SlowActors","page":"Home","title":"SlowActors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A \"slow\" actor library to test the interface with Actors.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SlowActors implements the minimal actor primitives defined by Actors.jl in a different way in order to","category":"page"},{"location":"","page":"Home","title":"Home","text":"prove that they are sufficient to run the basic examples,\nshow that actors from both libraries can communicate,\nmake API functions and applications of Actors.jl run with SlowActors,\ngive an example how the interface of Actors.jl can be implemented in another library.","category":"page"}]
}
